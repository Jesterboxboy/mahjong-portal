syntax = "proto3";

package Common;

// Frey specifics

message AccessRules {
  map<string, RuleValue> rules = 1;
}

message RuleValue {
  oneof kind {
    // Represents a double value.
    int32 number_value = 2;
    // Represents a string value.
    string string_value = 3;
    // Represents a boolean value.
    bool bool_value = 4;
  }
}

message EventAdmin {
  int32 ruleId = 1;
  int32 personId = 2;
  string personName = 3;
}

message RuleListItem {
  string default = 1;
  string type = 2;
  string title = 3;
}

message EventRuleListItem {
  bool isGlobal = 1;
  int32 id = 2;
  RuleValue value = 3;
  string name = 4;
  string ownerTitle = 5;
  repeated string allowedValues = 6;
}

message RuleListItemEx {
  int32 id = 1;
  string type = 2;
  RuleValue value = 3;
  repeated string allowedValues = 4;
}

message RuleListItemExMap {
  map<string, RuleListItemEx> rules = 1;
}

message Person {
  int32 id = 1;
  string city = 2;
  string tenhouId = 3;
  string title = 4;
}

message PersonEx {
  int32 id = 1;
  string city = 2;
  string tenhouId = 3;
  string title = 4;
  string country = 5;
  string email = 6;
  string phone = 7;
  repeated int32 groups = 8;
}

message Group {
  int32 id = 1;
  string title = 2;
  string color = 3;
  string description = 4;
}

// Mimir specifics

enum EventType {
  ONLINE = 0;
  TOURNAMENT = 1;
  LOCAL = 2;
}

enum TournamentGamesStatus {
  NONE = 0; // for non-tournament events
  SEATING_READY = 1;
  STARTED = 2;
}

enum RoundOutcome {
  RON = 0;
  TSUMO = 1;
  DRAW = 2;
  ABORT = 3;
  CHOMBO = 4;
  NAGASHI = 5;
  MULTIRON = 6;
}

enum SessionStatus {
  PLANNED = 0;
  INPROGRESS = 1;
  PREFINISHED = 2;
  FINISHED = 3;
  CANCELLED = 4;
}

message Country {
  string code = 1;
  string name = 2;
}

message Event {
  int32 id = 1;
  string title = 2;
  string description = 3;
  bool finished = 4;
  bool isListed = 5;
  bool isRatingShown = 6;
  bool tournamentStarted = 7;
  EventType type = 8;
  bool isPrescripted = 9;
}

message MyEvent {
  int32 id = 1;
  string title = 2;
  string description = 3;
  bool isOnline = 4;
}

message GameConfig {
  string rulesetTitle = 10;
  string eventTitle = 26;
  string eventDescription = 27;
  string eventStatHost = 28;
  bool useTimer = 29;
  bool usePenalty = 30;
  int32 gameDuration = 34; // minutes
  string timezone = 35;
  bool isOnline = 36;
  bool isTeam = 37;
  bool autoSeating = 38;
  bool syncStart = 39;
  bool syncEnd = 40;
  bool sortByGames = 41;
  bool allowPlayerAppend = 42;
  int32 seriesLength = 45;
  int32 minGamesCount = 46;
  TournamentGamesStatus gamesStatus = 47;
  bool hideResults = 48;
  bool hideAddReplayButton = 49;
  bool isPrescripted = 50;
  bool isFinished = 52;
  RulesetConfig rulesetConfig = 53;
}

message PlayerInRating {
  int32 id = 1;
  string title = 2;
  string tenhouId = 3;
  float rating = 4;
  int32 chips = 5;
  bool winnerZone = 6;
  float avgPlace = 7;
  float avgScore = 8;
  int32 gamesPlayed = 9;
}

message Player {
  int32 id = 1;
  string title = 2;
  string tenhouId = 3;
}

message FinalResultOfSession {
  int32 playerId = 1;
  int32 score = 2;
  float ratingDelta = 3;
  int32 place = 4;
}

message Penalty {
  int32 who = 1;
  int32 amount = 2;
  optional string reason = 3;
}

message RonResult {
  int32 roundIndex = 1;
  int32 honba = 2;
  int32 winnerId = 3;
  int32 loserId = 4;
  int32 paoPlayerId = 5;
  int32 han = 6;
  int32 fu = 7;
  repeated int32 yaku = 8; // yaku ids
  repeated int32 riichiBets = 9; // player ids
  int32 dora = 10;
  int32 uradora = 11;
  int32 kandora = 12;
  int32 kanuradora = 13;
  bool openHand = 14;
}

message MultironWin {
  int32 winnerId = 1;
  int32 paoPlayerId = 2;
  int32 han = 3;
  int32 fu = 4;
  repeated int32 yaku = 5; // yaku ids
  int32 dora = 6;
  int32 uradora = 7;
  int32 kandora = 8;
  int32 kanuradora = 9;
  bool openHand = 10;
}

message MultironResult {
  int32 roundIndex = 1;
  int32 honba = 2;
  int32 loserId = 3;
  int32 multiRon = 4; // count of players who won
  repeated MultironWin wins = 5;
  repeated int32 riichiBets = 6; // player ids
}

message TsumoResult {
  int32 roundIndex = 1;
  int32 honba = 2;
  int32 winnerId = 3;
  int32 paoPlayerId = 4;
  int32 han = 5;
  int32 fu = 6;
  repeated int32 yaku = 7; // yaku ids
  repeated int32 riichiBets = 8; // player ids
  int32 dora = 9;
  int32 uradora = 10;
  int32 kandora = 11;
  int32 kanuradora = 12;
  bool openHand = 13;
}

message DrawResult {
  int32 roundIndex = 1;
  int32 honba = 2;
  repeated int32 riichiBets = 3; // player ids
  repeated int32 tempai = 4; // player ids
}

message AbortResult {
  int32 roundIndex = 1;
  int32 honba = 2;
  repeated int32 riichiBets = 3; // player ids
}

message ChomboResult {
  int32 roundIndex = 1;
  int32 honba = 2;
  int32 loserId = 3;
}

message NagashiResult {
  int32 roundIndex = 1;
  int32 honba = 2;
  repeated int32 riichiBets = 3; // player ids
  repeated int32 tempai = 4; // player ids
  repeated int32 nagashi = 5; // player ids
}

message Round {
  oneof outcome {
    RonResult ron = 1;
    TsumoResult tsumo = 2;
    MultironResult multiron = 3;
    DrawResult draw = 4;
    AbortResult abort = 5;
    ChomboResult chombo = 6;
    NagashiResult nagashi = 7;
  }
}

message GameResult {
  string sessionHash = 1;
  optional string date = 2;
  string replayLink = 3;
  repeated int32 players = 4;
  repeated FinalResultOfSession finalResults = 5;
  repeated Penalty penaltyLog = 6;
  repeated Round rounds = 7;
}

message PlayerPlaceInSeries {
  string sessionHash = 1;
  int32 place = 2;
}

message SeriesResult {
  Player player = 1;
  repeated PlayerPlaceInSeries bestSeries = 2;
  float bestSeriesScores = 3;
  int32 bestSeriesPlaces = 4;
  string bestSeriesAvgPlace = 5; // formatted numeric string
  repeated PlayerPlaceInSeries currentSeries = 6;
  float currentSeriesScores = 7;
  int32 currentSeriesPlaces = 8;
  string currentSeriesAvgPlace = 9; // formatted numeric string
}

message ReplacementPlayer {
  int32 id = 1;
  string title = 2;
}

message PlayerInSession {
  int32 id = 1;
  string title = 2;
  int32 score = 3;
  optional ReplacementPlayer replacedBy = 4;
  float ratingDelta = 5;
}

message CurrentSession {
  string sessionHash = 1;
  string status = 2;
  optional int32 tableIndex = 3;
  repeated PlayerInSession players = 4;
}

message RegisteredPlayer {
  int32 id = 1;
  string title = 2;
  optional int32 localId = 3;
  optional string teamName = 4;
  string tenhouId = 5;
  bool ignoreSeating = 6;
  optional ReplacementPlayer replacedBy = 7;
}

message SessionHistoryResult {
  string sessionHash = 1;
  int32 eventId = 2;
  int32 playerId = 3;
  int32 score = 4;
  float ratingDelta = 5;
  int32 place = 6;
  string title = 7;
}

message SessionHistoryResultTable {
  repeated SessionHistoryResult table = 1;
}

message PlacesSummaryItem {
  int32 place = 1;
  int32 count = 2; // count of games finished on this particular place
}

message PlayerWinSummary {
  int32 ron = 1;
  int32 tsumo = 2;
  int32 chombo = 3;
  int32 feed = 4;
  int32 tsumofeed = 5;
  int32 winsWithOpen = 6;
  int32 winsWithRiichi = 7;
  int32 winsWithDama = 8;
  int32 unforcedFeedToOpen = 9;
  int32 unforcedFeedToRiichi = 10;
  int32 unforcedFeedToDama = 11;
  int32 draw = 12;
  int32 drawTempai = 13;
  int32 pointsWon = 14;
  int32 pointsLostRon = 15;
  int32 pointsLostTsumo = 16;
}

message HandValueStat {
  int32 hanCount = 1;
  int32 count = 2; // count of hands with this value
}

message YakuStat {
  int32 yakuId = 1;
  int32 count = 2; // count of hands contained this yaku
}

message RiichiSummary {
  int32 riichiWon = 1;
  int32 riichiLost = 2;
  int32 feedUnderRiichi = 3;
}

message DoraSummary {
  int32 count = 1;
  float average = 2;
}

message IntermediateResultOfSession {
  int32 playerId = 1;
  int32 score = 2;
  optional int32 penaltyScore = 3;
}

message PaymentLogItem {
  optional int32 from = 1;
  optional int32 to = 2;
  int32 amount = 3;
}

message PaymentLog {
  repeated PaymentLogItem direct = 1;
  repeated PaymentLogItem riichi = 2;
  repeated PaymentLogItem honba = 3;
}

message RoundState {
  string sessionHash = 1;
  int32 dealer = 2; // player id
  int32 roundIndex = 3;
  int32 riichi = 4; // riichis on table
  int32 honba = 5; // honba on table
  repeated int32 riichiIds = 6; // player ids
  repeated IntermediateResultOfSession scores = 7; // scores AFTER payments
  repeated IntermediateResultOfSession scoresDelta = 8;
  PaymentLog payments = 9;
  Round round = 10;
  RoundOutcome outcome = 11;
}

message EventData {
  optional EventType type = 1; // required to add, not required for edit
  string title = 2;
  string description = 3;
  int32 duration = 4;
  string timezone = 6;
  int32 lobbyId = 7; // xxxx for common lobby, 1xxxx for tournament lobby
  int32 seriesLength = 8;
  int32 minGames = 9;
  bool isTeam = 10;
  bool isPrescripted = 11;
  int32 autostart = 12; // time until game autostart
  RulesetConfig rulesetConfig = 14;
}

message TableState {
  SessionStatus status = 1;
  bool mayDefinalize = 2;
  string sessionHash = 3;
  repeated Penalty penaltyLog = 4;
  optional int32 tableIndex = 5;
  optional Round lastRound = 6;
  int32 currentRoundIndex = 7;
  repeated IntermediateResultOfSession scores = 8;
  repeated RegisteredPlayer players = 9;
}

message Achievement {
  string achievementId = 1;
  string achievementData = 2; // JSON stringified data
}

message LocalIdMapping {
  int32 playerId = 1;
  int32 localId = 2;
}

message TeamMapping {
  int32 playerId = 1;
  string teamName = 2;
}

message PlayerSeating {
  int32 order = 1; // order at the table
  int32 playerId = 2;
  int32 sessionId = 3;
  int32 tableIndex = 4;
  float rating = 5;
  string playerTitle = 6;
}

message PlayerSeatingSwiss {
  int32 playerId = 1;
  float rating = 2;
}

message TableItemSwiss {
  repeated PlayerSeatingSwiss players = 1; // should be 4 elements
}

message PrescriptedTable {
  repeated RegisteredPlayer players = 1; // should be 4 elements
}

message SessionState {
  int32 dealer = 1;
  int32 roundIndex = 2;
  int32 riichiCount = 3;
  int32 honbaCount = 4;
  repeated IntermediateResultOfSession scores = 5;
  bool finished = 6;
  repeated Penalty penalties = 7;
  bool lastHandStarted = 8;
}

message Uma {
  int32 place1 = 1;
  int32 place2 = 2;
  int32 place3 = 3;
  int32 place4 = 4;
}

message ComplexUma {
  Uma neg1 = 1;
  Uma neg3 = 2;
  Uma otherwise = 3;
}

enum UmaType {
  UMA_SIMPLE = 0;
  UMA_COMPLEX = 1;
}

enum EndingPolicy {
  EP_NONE = 0;
  EP_ONE_MORE_HAND = 1;
  EP_END_AFTER_HAND = 2;
}

message RulesetConfig {
  ComplexUma complexUma = 1; //
  EndingPolicy endingPolicy = 2; //
  Uma uma = 3; //
  UmaType umaType = 4; //
  bool doubleronHonbaAtamahane = 5; //
  bool doubleronRiichiAtamahane = 6; //
  bool equalizeUma = 7; //
  bool extraChomboPayments = 8; //
  bool playAdditionalRounds = 9; //
  bool riichiGoesToWinner = 10; //
  bool tonpuusen = 11; //
  bool withAbortives = 12; //
  bool withAtamahane = 13; //
  bool withButtobi = 14; //
  bool withKazoe = 15; //
  bool withKiriageMangan = 16; //
  bool withKuitan = 17; //
  bool withLeadingDealerGameOver = 18; //
  bool withMultiYakumans = 19; //
  bool withNagashiMangan = 20; //
  bool withWinningDealerHonbaSkipped = 21; //
  int32 chipsValue = 22; //
  int32 chomboPenalty = 23; //
  int32 gameExpirationTime = 24; //
  int32 goalPoints = 25; //
  int32 maxPenalty = 26; //
  int32 minPenalty = 27; //
  int32 oka = 28; //
  int32 penaltyStep = 29; //
  int32 replacementPlayerFixedPoints = 30;
  int32 replacementPlayerOverrideUma = 31;
  int32 startPoints = 32; //
  int32 startRating = 33; //
  repeated int32 allowedYaku = 34; //
  repeated int32 yakuWithPao = 35; //
}

// Generics

message Generic_Success_Response {
  bool success = 1;
}

message Generic_Event_Payload {
  int32 eventId = 1;
}
